import 'dart:io';
import 'package:pdf/widgets.dart' as pw;

import 'package:csv/csv.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutterapp/Screens/download_data.dart';
import 'package:flutterapp/Screens/login_screen.dart';
import 'package:intl/intl.dart';
import 'package:flutterapp/Screens/upload_data.dart';
import 'package:flutterapp/Screens/setup_screen.dart';
import 'package:flutterapp/Screens/settings_screen.dart';
import 'package:flutterapp/Screens/profile_screen.dart';
import 'package:path_provider/path_provider.dart';
import 'package:printing/printing.dart';

class HomeScreen extends StatelessWidget {
  final dateController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Receipt Printer',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ReceiptPrinterScreen(),
    );
  }
}

class ReceiptPrinterScreen extends StatefulWidget {
  @override
  _ReceiptPrinterScreenState createState() => _ReceiptPrinterScreenState();
}

class _ReceiptPrinterScreenState extends State<ReceiptPrinterScreen> {
  TextEditingController barcodeController = TextEditingController();
  TextEditingController trxnoController = TextEditingController();
  TextEditingController dateController = TextEditingController();
  TextEditingController vendornameController = TextEditingController();
  TextEditingController quantityController = TextEditingController();
  TextEditingController unitpriceController = TextEditingController();
  TextEditingController totalAmountController = TextEditingController();

  void _computeTotal() {
    final qty = int.tryParse(quantityController.text) ?? 0;
    final unitPrice = double.tryParse(unitpriceController.text) ?? 0.0;
    final total = qty * unitPrice;
    totalAmountController.text = total.toStringAsFixed(2);
  }
  void _createPdf() async {
    final doc = pw.Document();

    doc.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Container(
            padding: pw.EdgeInsets.all(20),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('BARANGAY BAYAMBANG', style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 20),
                pw.Text('Receipt', style: pw.TextStyle(fontSize: 20, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 20),
                pw.Text('Barcode: ${barcodeController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Transaction Number: ${trxnoController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Date: ${dateController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Vendor Name: ${vendornameController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Quantity: ${quantityController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Unit Price: ${unitpriceController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 10),
                pw.Text('Total Amount: ${totalAmountController.text}', style: pw.TextStyle(fontSize: 16)),
                pw.SizedBox(height: 20),
                pw.Divider(),
                pw.SizedBox(height: 20),
                pw.Text('Thank you for your purchase!', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold)),
              ],
            ),
          );
        },
      ),
    );

    final pdfBytes = await doc.save();

    await Printing.sharePdf(bytes: pdfBytes);
  }


  @override
  void dispose() {
    barcodeController.dispose();
    trxnoController.dispose();
    dateController.dispose();
    vendornameController.dispose();
    quantityController.dispose();
    unitpriceController.dispose();
    totalAmountController.dispose();
    super.dispose();
  }

  Future<String> get _localPath async {
    final directory = await getExternalStorageDirectory();
    final now = DateTime.now();
    final dateFormat = DateFormat('yyyy-MM-dd');
    final folderPath = '${directory!.path}/${dateFormat.format(now)}'; // com.example.publicmarket_sqlite/2023-05-30
    await Directory(folderPath).create(recursive: true);
    return folderPath;
  }

  Future<File> get _localFile async {
    final path = await _localPath;
    final trxno = trxnoController.text;
    return File('$path/receipt_$trxno.sql');
  }



  void printReceipt() async {
    String barcode = barcodeController.text;
    String trxno = trxnoController.text;
    String date = dateController.text;
    String vendorname = vendornameController.text;
    double? unitprice = double.tryParse(unitpriceController.text);
    int? quantity = int.tryParse(quantityController.text);

    if (barcode != null &&
        trxno != null &&
        date != null &&
        vendorname != null &&
        quantity != null) {
      double totalAmount = quantity * unitprice!;

      String sqlData = '''
      INSERT INTO receipts (Barcode, TrxNo, Date, VendorName, Quantity, UnitPrice, Total)
      VALUES ('$barcode', '$trxno', '$date', '$vendorname', $quantity, $unitprice, $totalAmount);
    ''';

      final file = await _localFile;
      await file.writeAsString(sqlData);

      setState(() {
        totalAmountController.text = totalAmount.toStringAsFixed(2);
      });
      print('Receipt printed to ${file.path}');

    } else {
      print('Please fill in all the fields.');
    }
    _createPdf();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        iconTheme: IconThemeData(
          color: Colors.black,
          size: 40,

          /// set the color of the AppBar buttons
        ),
        title: Center(
          child: Padding(
            padding: const EdgeInsets.fromLTRB(20, 0, 50, 0),
            child: Center(
              child: Image.asset(
                'assets/images/logo.png', // replace this with the path to your image
                height: 60, // set the height of the image
              ),
            ),
          ),
        ),
        elevation: 0,
        toolbarHeight: 80,
        actions: [
          IconButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => HomeScreen()),
              );
            },
            icon: Icon(Icons.add),
            color: Colors.black,
            iconSize: 40, // set the size of the icon
          ),
        ],
      ),
      drawer: SafeArea(
        child: Drawer(
          child: ListView(
            padding: EdgeInsets.zero,
            children: <Widget>[
              Container(
                height: 150,
                decoration: BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage('assets/images/marketbanner.png'),
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              SizedBox(height: 15),
              ListTile(
                leading: Icon(Icons.home),
                title: Text('AMBULANT COLLECTION ',
                    style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => HomeScreen()),
                  );
                },
              ),

              ListTile(
                leading: Icon(Icons.cloud_download),
                title: Text('DOWNLOAD DATA',
                    style: TextStyle(color: Colors.black)),
                onTap: () {
                  // TODO: navigate to Download Data Screen
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => DownloadData()),
                  );
                },
              ),
              ListTile(
                leading: Icon(Icons.cloud_upload),
                title:
                Text('UPLOAD DATA', style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => UploadData()),
                  );
                },
              ),
              ListTile(
                leading: Icon(Icons.build),
                title: Text('SET UP', style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => SetUp()),
                  );
                },
              ),
              ListTile(
                leading: Icon(Icons.settings),
                title: Text('SETTINGS', style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => SettingsScreen()),
                  );
                },
              ),
              ListTile(
                leading: Icon(Icons.person),
                title: Text('PROFILE', style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => ProfileScreen()),
                  );
                },
              ),
              Divider(), // Add a divider before the Logout button
              ListTile(
                leading: Icon(Icons.logout),
                title: Text('LOGOUT', style: TextStyle(color: Colors.black)),
                onTap: () {
                  // TODO: log out user and navigate to Login Screen
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => LoginScreen()),
                  );
                },
              ),
            ],
          ),
        ),
      ),

      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(
                  child: Text(
                    'AMBULANT COLLECTION',
                    style:
                    TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold),
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  keyboardType:
                  TextInputType.number, // set the keyboard to numeric only
                  inputFormatters: [
                    FilteringTextInputFormatter.digitsOnly
                  ], // only
                  controller: barcodeController,// allow digits
                  decoration: InputDecoration(
                    labelText: 'Barcode',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                    ),
                  ),
                ),
                SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      flex: 1,
                      child: TextField(
                        keyboardType: TextInputType
                            .number, // set the keyboard to numeric only
                        inputFormatters: [
                          FilteringTextInputFormatter.digitsOnly
                        ], //
                        controller: trxnoController,// only allow digits
                        decoration: InputDecoration(
                          labelText: ' Trx No.',
                          border: OutlineInputBorder(
                            borderRadius:
                            BorderRadius.all(Radius.circular(10.0)),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 10),
                    Expanded(
                      flex: 1,
                      child: TextField(
                        readOnly: true,
                        // controller: dateController,
                        decoration: InputDecoration(
                          labelText: 'Date',
                          border: OutlineInputBorder(
                            borderRadius:
                            BorderRadius.all(Radius.circular(10.0)),
                          ),
                          suffixIcon: Icon(Icons.calendar_today),
                        ),
                        controller: dateController, // set the controller for the text field
                        onTap: () async {
                          final DateTime? selectedDate = await showDatePicker(
                            context: context,
                            initialDate: DateTime.now(),
                            firstDate: DateTime(1900),
                            lastDate: DateTime(2100),
                          );
                          if (selectedDate != null) {
                            // update the value of the text field with the selected date
                            String formattedDate =
                            DateFormat('MM/dd/yyyy').format(selectedDate);
                            dateController.text = formattedDate;
                          }
                        },
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 10),
                TextField(
                  controller: vendornameController,
                  decoration: InputDecoration(
                    labelText: 'Vendor Name',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                    ),
                  ),
                ),
                SizedBox(height: 20),


                // ...
                Row(
                  children: [
                    DataTable(
                      columns: [
                        DataColumn(
                          label: Container(
                            padding: EdgeInsets.all(10),

                            child: Text(
                              'Qty',
                              style: TextStyle(
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                        DataColumn(
                          label: Container(
                            padding: EdgeInsets.all(10),

                            child: Text(
                              'Unit Price',
                              style: TextStyle(
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                        DataColumn(
                          label: Container(
                            padding: EdgeInsets.all(10),

                            child: Text(
                              'Total',
                              style: TextStyle(
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                      ],
                      rows: [
                        DataRow(
                          cells: [
                            DataCell(
                              Container(
                                height: 100,
                                child: TextField(
                                  controller: quantityController,
                                  keyboardType: TextInputType.number,
                                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                                  onChanged: (_) => _computeTotal(),
                                ),
                              ),
                            ),
                            DataCell(
                              Container(
                                height: 50,
                                child: TextField(
                                  controller: unitpriceController,
                                  keyboardType: TextInputType.numberWithOptions(decimal: true),
                                  onChanged: (_) => _computeTotal(),
                                ),
                              ),
                            ),
                            DataCell(
                              Container(
                                height: 80,
                                child: TextFormField(
                                  controller: totalAmountController,
                                  readOnly: true,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),




                SizedBox(height: 20),
                Table(
                  border: TableBorder.all(
                    borderRadius: BorderRadius.all(Radius.circular(10.0)),
                  ),
                  columnWidths: {
                    0: FlexColumnWidth(2),
                    1: FlexColumnWidth(1),
                    2: FlexColumnWidth(2),
                  },
                  children: [
                    TableRow(
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'Grand Total:',
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Expanded(
                                child: TextFormField(
                                  controller: totalAmountController,
                                  readOnly: true,
                                  textAlign: TextAlign.right,
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),),
                              ),
                            ],
                          ),


                        ),
                      ],
                    ),
                  ],
                ),
                //grandtotal
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: printReceipt,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.print, size: 30.0),
                      SizedBox(width: 10.0),
                      Text('Print'),
                    ],
                  ),
                ),

              ],
            ),
          ),
        ),
      ),

    );
  }
}



